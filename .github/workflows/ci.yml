name: CI

on:
  push:
    branches:
      - master
      - develop
      - githubactions*
      - feature/**
      - fix/**
      - pr/**
  pull_request:
    branches:
      - master
      - develop


jobs:
  build-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-24.04
            compiler: g++-13
          - os: ubuntu-24.04
            compiler: g++-14
          # - os: ubuntu-24.04
          #   compiler: clang-17

    env:
      CONAN_USER_HOME: "${{ github.workspace }}/conan/"
      CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan/short"

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          if [[ "${{ matrix.compiler }}" == clang++* ]]; then
            # For clang, install the base package
            CLANG_VERSION=$(echo "${{ matrix.compiler }}" | sed 's/clang++-//')
            sudo apt-get install -y clang-${CLANG_VERSION}
          else
            sudo apt-get install -y ${{ matrix.compiler }}
          fi

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.compiler }}

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}
          restore-keys: conan-${{ runner.os }}-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.compiler }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-ccache-


      - name: Install Conan
        uses: conan-io/setup-conan@v1

      - name: Configure, Build, and Test Project
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=cmake/conan_provider.cmake \
                   -DCMAKE_BUILD_TYPE=Release \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                   -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
          cmake --build . --parallel
          ctest --output-on-failure

  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [macos-14]
        xcode: ['15.0.1', '15.2']

    env:
      CONAN_USER_HOME: "${{ github.workspace }}/conan/"
      CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan/short"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.xcode }}

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.compiler }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-ccache-

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}
          restore-keys: conan-${{ runner.os }}-

      - name: Install Conan
        uses: conan-io/setup-conan@v1

      - name: Configure, Build, and Test Project
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=cmake/conan_provider.cmake \
                   -DCMAKE_BUILD_TYPE=Release \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build . --parallel
          ctest --output-on-failure

  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        arch: [x64, x86]

    env:
      CONAN_USER_HOME: "${{ github.workspace }}/conan/"
      CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan/short"

    steps:
      - uses: actions/checkout@v4

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: windows-${{ matrix.arch }}
          variant: sccache

      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.arch }}-sccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-sccache-

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: conan-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('conanfile.txt') }}
          restore-keys: conan-${{ runner.os }}-${{ matrix.arch }}-

      - name: Install Conan
        uses: conan-io/setup-conan@v1

      - name: Install Ninja
        run: choco install ninja

      - name: Setup MSVC
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: ${{ matrix.arch }}

      - name: Configure, Build, and Test Project
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=cmake/conan_provider.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -G "Ninja"
          cmake --build . --parallel
          ctest --output-on-failure
